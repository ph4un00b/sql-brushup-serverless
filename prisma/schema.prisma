// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url          = env("DATABASE_URL")
  // foreign keys applied at application level
  // @see https://www.prisma.io/docs/concepts/components/prisma-schema/relations/relation-mode
  relationMode = "prisma"
}

model CompositePeople {
  id        BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  firstName String   @db.VarChar(250)
  lastName  String   @db.VarChar(250)
  email     String   @db.VarChar(250)
  birthday  DateTime @db.Date

  // @@index(fields: [firstName], name: "fn")
  // @@index(fields: [lastName], name: "ln")
  // @@index(fields: [birthday], name: "b")
  @@index(fields: [firstName, lastName, birthday], name: "compuesto")
}

model TestNamesCuidIndexed {
  id   String @id @default(cuid())
  name String @db.VarChar(250)

  @@index([name])
}

model TestNamesIndexed {
  id   BigInt @id @default(autoincrement()) @db.UnsignedBigInt
  name String @db.VarChar(250)

  @@index([name])
}

model TestNamesCuid {
  id   String @id @default(cuid())
  name String @db.VarChar(250)
}

model TestNames {
  id   BigInt @id @default(autoincrement()) @db.UnsignedBigInt
  name String @db.VarChar(250)
}

model Discount {
  id           String @id @default(cuid())
  discountCode String @db.VarChar(100)
  User         User?
}

model Visit {
  id    String @id @default(cuid())
  email String @unique @db.VarChar(255)
  count Int    @db.SmallInt
}

model Vaccination {
  cat_name String @unique
}

model Cat {
  id      String @id @default(cuid())
  ownerId String
  name    String
  owner   User   @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  @@index([ownerId])
}

model Guestbook {
  id        String   @id @default(cuid())
  name      String
  message   String   @db.VarChar(100)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  discountId    String?   @unique
  discount      Discount? @relation(fields: [discountId], references: [id])
  accounts      Account[]
  sessions      Session[]
  cats          Cat[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
