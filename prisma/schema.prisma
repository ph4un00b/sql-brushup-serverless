// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextIndex", "fullTextSearch"]
}

datasource db {
  provider = "mysql"

  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url          = env("DATABASE_URL")
  // foreign keys applied at application level
  // @see https://www.prisma.io/docs/concepts/components/prisma-schema/relations/relation-mode
  relationMode = "prisma"
}

enum QueueStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
}

model QueueTest {
  id         BigInt      @id @default(autoincrement()) @db.UnsignedBigInt
  payload    String      @db.VarChar(255)
  owner      Int         @default(0)
  status     QueueStatus @default(PENDING)
  available  Int         @default(1) @db.TinyInt()
  createdAt  DateTime    @default(now())
  startedAt  DateTime?   @db.Timestamp()
  finishedAt DateTime?   @db.Timestamp()
  updatedAt  DateTime    @default(dbgenerated("CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP")) @db.Timestamp()
  // uAt        DateTime    @updatedAt
}

model UniqueData {
  id        BigInt  @id @default(autoincrement()) @db.UnsignedBigInt
  first     String  @db.VarChar(100)
  last      String  @db.VarChar(100)
  secondary String? @db.VarChar(100)
  specific  String? @db.VarChar(100)
  // instead of creating a composite index
  md5       Bytes?  @unique @default(dbgenerated("(UNHEX(MD5(CONCAT_WS('|', first, secondary, specific, last))))")) @db.Binary(16)
}

model UrlTest {
  id     BigInt  @id @default(autoincrement()) @db.UnsignedBigInt
  url    String  @db.Text
  // good
  urlMD5 String? @default(dbgenerated("(MD5(url))")) @db.Char(32)
  // better (⌐■_■)
  urlBIN Bytes?  @default(dbgenerated("(UNHEX(MD5(url)))")) @db.Binary(16)

  @@index(fields: [urlMD5], name: "md5")
  @@index(fields: [urlBIN], name: "bin")
}

model RentalsTest {
  id         BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  rentalDate DateTime @db.Date
}

model OrderTest {
  id         BigInt  @id @default(autoincrement()) @db.UnsignedBigInt
  customerId BigInt
  total      Decimal @db.Decimal(10, 2)
}

model JoinBad {
  // id             BigInt          @id @default(autoincrement()) @db.UnsignedBigInt
  company        CompanyTable    @relation(fields: [companyTableId], references: [id])
  companyTableId BigInt          @db.UnsignedBigInt
  people         CompositePeople @relation(fields: [peopleId], references: [id])
  peopleId       BigInt          @db.UnsignedBigInt
  createdAt      DateTime?       @default(now())
  createdBy      String?         @default("seed") @db.VarChar(20)

  @@id(fields: [companyTableId, peopleId], name: "pk_pivot")
}

model JoinCool {
  company        CompanyTable    @relation(fields: [companyTableId], references: [id])
  companyTableId BigInt          @db.UnsignedBigInt
  people         CompositePeople @relation(fields: [peopleId], references: [id])
  peopleId       BigInt          @db.UnsignedBigInt
  createdAt      DateTime?       @default(now())
  createdBy      String?         @default("seed") @db.VarChar(20)

  @@id(fields: [companyTableId, peopleId], name: "pk_pivot")
  @@index([companyTableId])
  @@index([peopleId])
}

model CompanyTable {
  id       BigInt     @id @default(autoincrement()) @db.UnsignedBigInt
  name     String     @unique @db.VarChar(25)
  joinBad  JoinBad[]
  joinCool JoinCool[]
}

model RandomTable {
  id      BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  size    Int      @db.UnsignedSmallInt
  title   String   @db.VarChar(100)
  // randomDate DateTime @default(dbgenerated("(CURRENT_DATE + INTERVAL FLOOR(RAND() * 365) DAY)")) @db.DateTime()
  dueDate DateTime @db.Date
  dueTime DateTime @db.Time

  @@index(fields: [size], name: "size")
  @@index(fields: [dueDate], name: "due_date")
}

model HistoryCompositeUnique {
  id          BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  userId      String    @db.VarChar(255)
  username    String    @db.VarChar(255)
  productId   String    @db.VarChar(255)
  productName String    @db.VarChar(255)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime?

  @@unique([userId, productId])
}

model HistoryCompositePK {
  userId      String    @db.VarChar(255)
  username    String    @db.VarChar(255)
  productId   String    @db.VarChar(255)
  productName String    @db.VarChar(255)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime?

  @@id([userId, productId])
}

model HistoryIssue {
  id          BigInt @id @default(autoincrement()) @db.UnsignedBigInt
  userId      String @db.VarChar(255)
  username    String @db.VarChar(255)
  productId   String @db.VarChar(255)
  productName String @db.VarChar(255)
}

model CompositePeople {
  id        BigInt     @id @default(autoincrement()) @db.UnsignedBigInt
  firstName String     @db.VarChar(250)
  lastName  String     @db.VarChar(250)
  email     String     @db.VarChar(250)
  birthday  DateTime   @db.Date
  bio       String     @db.VarChar(255)
  joinBad   JoinBad[]
  joinCool  JoinCool[]

  @@index(fields: [email], name: "email")
  @@index(fields: [birthday(sort: Asc)], name: "nacido")
  // @@index(fields: [firstName], name: "fn")
  // @@index(fields: [lastName], name: "ln")
  // @@index(fields: [birthday], name: "b")
  @@index(fields: [firstName, lastName, birthday], name: "compuesto")
  @@fulltext(fields: [firstName, lastName, bio])
}

model TestNamesCuidIndexed {
  id   String @id @default(cuid())
  name String @db.VarChar(250)

  @@index([name])
}

model TestNamesIndexed {
  id   BigInt @id @default(autoincrement()) @db.UnsignedBigInt
  name String @db.VarChar(250)

  @@index([name])
}

model TestNamesCuid {
  id   String @id @default(cuid())
  name String @db.VarChar(250)
}

model TestNames {
  id   BigInt @id @default(autoincrement()) @db.UnsignedBigInt
  name String @db.VarChar(250)
}

model Discount {
  id           String @id @default(cuid())
  discountCode String @db.VarChar(100)
  User         User?
}

model Visit {
  id    String @id @default(cuid())
  email String @unique @db.VarChar(255)
  count Int    @db.SmallInt
}

model Vaccination {
  cat_name String @unique
}

model Cat {
  id      String @id @default(cuid())
  ownerId String
  name    String
  owner   User   @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  @@index([ownerId])
}

model Guestbook {
  id        String   @id @default(cuid())
  name      String
  message   String   @db.VarChar(100)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  discountId    String?   @unique
  discount      Discount? @relation(fields: [discountId], references: [id])
  accounts      Account[]
  sessions      Session[]
  cats          Cat[]
  // @todo ALTER TABLE users ADD COLUMN flags TINYINT UNSIGNED DEFAULT 0;
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
